// strategy_template.cs

#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Windows.Media;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
#endregion

//This namespace holds Strategies in this folder and is required. Do not change it.
namespace NinjaTrader.NinjaScript.Strategies
{
    public class AI_GENERATED_STRATEGY_NAME : Strategy
    {
        #region State Variables
        // --- AI will add necessary state variables here ---
        #endregion

        #region User Inputs
        // --- AI will add User Inputs / Properties here ---
        #endregion

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = "A strategy generated by the Gemini-Autogen Assistant.";
                Name = "AI_GENERATED_STRATEGY_NAME";
                Calculate = Calculate.OnBarClose;
                EntriesPerDirection = 1;
                EntryHandling = EntryHandling.AllEntries;
                IsExitOnSessionCloseStrategy = true;
                ExitOnSessionCloseSeconds = 60;
                IsFillLimitOnTouch = false;
                MaximumBarsLookBack = MaximumBarsLookBack.TwoHundredFiftySix;
                OrderFillResolution = OrderFillResolution.Standard;
                Slippage = 0;
                StartBehavior = StartBehavior.WaitUntilFlat;
                TimeInForce = TimeInForce.Gtc;
                TraceOrders = false;
                RealtimeErrorHandling = RealtimeErrorHandling.StopCancelClose;
                StopTargetHandling = StopTargetHandling.PerEntryExecution;
                BarsRequiredToTrade = 20;
            }
            else if (State == State.Configure)
            {
                // --- AI will add Data Series here if necessary ---
            }
            else if (State == State.DataLoaded)
            {
                // --- AI will initialize indicators here ---
            }
        }

        protected override void OnBarUpdate()
        {
            // --- AI: BOILERPLATE & PRE-CONDITION CHECKS ---
            // The AI will add initial checks like BarsRequiredToTrade here.


            // --- AI: ENTRY LOGIC ---
            // The AI will insert the complete entry logic based on the user's rules here.


            // --- AI: EXIT LOGIC ---
            // The AI will insert the complete exit logic (stop-loss, profit target, etc.) here.

        }

        protected override void OnExecutionUpdate(Execution execution, string executionId, double price, int quantity, MarketPosition marketPosition, string orderId, DateTime time)
        {
            // --- AI will add execution logic here if needed, for example, to reset variables on exits ---
        }

        #region Helper Methods
        // This generic logging helper method is kept from your original template because it is excellent.
        private void Log(string message, LogLevel level)
        {
            if (TraceOrders || level == LogLevel.Error || level == LogLevel.Alert)
            {
                Print($"[{Time[0]:HH:mm:ss.fff} UTC] [{level.ToString().ToUpper()}] ({Name}) {message}");
            }
        }

        public enum LogLevel
        {
            Information,
            Warning,
            Error,
            Alert,
            Debug
        }
        #endregion
    }
}